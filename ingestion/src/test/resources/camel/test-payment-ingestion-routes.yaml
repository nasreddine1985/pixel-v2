- route:
    id: payment-ingestion-orchestrator
    from:
      uri: direct:payment-ingestion
      steps:
        - log:
            message: "Starting payment ingestion orchestration for message: ${body}"
        - setHeader:
            name: IngestionStartTime
            simple: "${date:now:yyyy-MM-dd HH:mm:ss}"
        - setHeader:
            name: ProcessingStage
            constant: INGESTION_START
        - to:
            uri: direct:database-persistence
        - to:
            uri: direct:reference-enrichment
        - to:
            uri: direct:enriched-data-persistence
        - to:
            uri: direct:validation
        - to:
            uri: direct:idempotence-check
        - choice:
            when:
              - simple: "${header.CanProcess} == true"
                steps:
                  - to:
                      uri: direct:kafka-publisher
            otherwise:
              steps:
                - to:
                    uri: direct:rejection-handler

# Test Message Receipt Routes (using native Camel components)
- route:
    id: http-receipt-route
    from:
      uri: platform-http:/test/payments?httpMethodRestrict=POST
      steps:
        - log:
            message: "Test: Message received via HTTP"
        - to:
            uri: direct:payment-ingestion

- route:
    id: file-receipt-route
    from:
      uri: file:/tmp/test-payments-in?delay=5000&move=.processed
      steps:
        - log:
            message: "Test: Message received via file"
        - to:
            uri: direct:payment-ingestion

# Database Persistence Step (Mock implementation for tests)
- route:
    id: database-persistence
    from:
      uri: direct:database-persistence
      steps:
        - log:
            message: "Test: Mock database persistence"
        - setHeader:
            name: ProcessingStage
            constant: DATABASE_PERSISTENCE
        - setHeader:
            name: persistenceStatus
            constant: SUCCESS
        - setHeader:
            name: persistedMessageId
            constant: TEST_ID_12345
        - setHeader:
            name: MessagePersisted
            constant: true

- route:
    id: reference-enrichment
    from:
      uri: direct:reference-enrichment
      steps:
        - log:
            message: "Test: Mock reference data enrichment"
        - setHeader:
            name: ProcessingStage
            constant: REFERENCE_ENRICHMENT
        - log:
            message: "Test: Reference data enrichment completed"

# Enriched Data Persistence Step (Mock implementation for tests)
- route:
    id: enriched-data-persistence
    from:
      uri: direct:enriched-data-persistence
      steps:
        - log:
            message: "Test: Mock enriched data persistence"
        - setHeader:
            name: ProcessingStage
            constant: ENRICHED_DATA_PERSISTENCE
        - setHeader:
            name: PersistenceType
            constant: ENRICHED
        - setHeader:
            name: persistenceStatus
            constant: SUCCESS
        - setHeader:
            name: persistedMessageId
            constant: TEST_ENRICHED_ID_67890
        - setHeader:
            name: EnrichedDataPersisted
            constant: true
        - log:
            message: "Test: Enriched message data mock-persisted to database with ID: ${header.persistedMessageId}"

- route:
    id: validation-step
    from:
      uri: direct:validation
      steps:
        - log:
            message: "Test: Mock message validation"
        - setHeader:
            name: ProcessingStage
            constant: VALIDATION
        - setHeader:
            name: IsValid
            constant: true
        - log:
            message: "Test: Message validation passed"

- route:
    id: idempotence-check
    from:
      uri: direct:idempotence-check
      steps:
        - log:
            message: "Test: Mock idempotence check"
        - setHeader:
            name: ProcessingStage
            constant: IDEMPOTENCE
        - setHeader:
            name: IsDuplicate
            constant: false
        - setHeader:
            name: CanProcess
            constant: true
        - log:
            message: "Test: Message idempotence check passed"

- route:
    id: kafka-publisher
    from:
      uri: direct:kafka-publisher
      steps:
        - log:
            message: "Test: Mock Kafka publishing"
        - setHeader:
            name: ProcessingStage
            constant: KAFKA_PUBLISH
        - setHeader:
            name: PublishTimestamp
            simple: "${date:now:yyyy-MM-dd HH:mm:ss}"
        - setHeader:
            name: KafkaTopic
            simple: "test-payments-processed"
        - log:
            message: "Test: Message mock-published to Kafka topic: ${header.KafkaTopic}"

# Rejection Handler
- route:
    id: rejection-handler
    from:
      uri: direct:rejection-handler
      steps:
        - log:
            message: "Test: Processing rejected message: ${header.RejectionReason}"
        - setHeader:
            name: ProcessingStage
            constant: REJECTION
        - setHeader:
            name: RejectionTimestamp
            simple: "${date:now:yyyy-MM-dd HH:mm:ss}"
        - log:
            message: "Test: Rejected message mock-sent to dead letter topic"

# Error Handler
- route:
    id: error-handler
    from:
      uri: direct:error-handler
      steps:
        - log:
            message: "Test: Processing system error"
        - setHeader:
            name: ProcessingStage
            constant: ERROR
        - log:
            message: "Test: Error message mock-sent to error topic"