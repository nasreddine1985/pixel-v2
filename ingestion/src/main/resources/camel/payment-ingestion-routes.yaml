# ===================================================================
# INTELLIGENT ROUTING CONFIGURATION
# ===================================================================
# This configuration implements smart routing based on message source:
# - CFT messages (files) → Kafka topics (batch processing)
# - HTTP/MQ messages → Processing module (real-time processing)
# 
# Processing Module Integration - Message Metadata Enrichment Processor
- beans:
    - name: enrichMessageWithMetadata
      type: "#class:com.pixel.v2.ingestion.processor.MessageMetadataEnrichmentProcessor"

# ===================================================================
# MAIN ORCHESTRATOR - Supports Intelligent Routing After Idempotence
# ===================================================================
- route:
    id: payment-ingestion-orchestrator
    from:
      uri: direct:payment-ingestion
      steps:
        - log:
            message: "Starting payment ingestion orchestration for message: ${body}"
        - setHeader:
            name: IngestionStartTime
            simple: "${date:now:yyyy-MM-dd HH:mm:ss}"
        - setHeader:
            name: ProcessingStage
            constant: INGESTION_START
        - to:
            uri: direct:database-persistence
        - to:
            uri: direct:reference-enrichment
        - to:
            uri: direct:enriched-data-persistence
        - to:
            uri: direct:validation
        - to:
            uri: direct:idempotence-check
        - choice:
            when:
              - simple: "${header.CanProcess} == true"
                steps:
                  - log:
                      message: "Routing message based on receipt channel: ${header.ReceiptChannel}"
                  - choice:
                      when:
                        - simple: "${header.ReceiptChannel} == 'CFT'"
                          steps:
                            - log:
                                message: "[SMART-ROUTING] CFT message - routing to Kafka for batch processing"
                            - to:
                                uri: direct:kafka-publisher
                      otherwise:
                        steps:
                          - log:
                              message: "[SMART-ROUTING] HTTP/MQ message - routing to processing module for real-time processing"
                          - to:
                              uri: direct:processing-publisher
            otherwise:
              steps:
                - to:
                    uri: direct:rejection-handler

# ===================================================================
# MESSAGE RECEIPT ROUTES - Enhanced with Channel Identification
# ===================================================================
# Each route sets ReceiptChannel header for intelligent routing:
# - MQ: Sets ReceiptChannel="MQ" → Routes to Processing Module
# - HTTP: Sets ReceiptChannel="HTTP" → Routes to Processing Module  
# - CFT: Sets ReceiptChannel="CFT" → Routes to Kafka Topics
- route:
    id: mq-receipt-route
    from:
      uri: kamelet:k-mq-message-receiver?queueName={{ingestion.mq.input.queue:PAYMENT_INPUT}}&host={{ingestion.mq.host:localhost}}&port={{ingestion.mq.port:1414}}&queueManager={{ingestion.mq.queue.manager:QM1}}&channel={{ingestion.mq.channel:DEV.ADMIN.SVRCONN}}&username={{ingestion.mq.username:admin}}&password={{ingestion.mq.password:admin}}
      steps:
        - log:
            message: "[MQ-RECEIPT] Message received from k-mq-message-receiver kamelet"
        - setHeader:
            name: ReceiptChannel
            constant: "MQ"
        - setHeader:
            name: MessageSource
            constant: "MQ_SERIES"
        - to:
            uri: direct:payment-ingestion

- route:
    id: http-receipt-route
    from:
      uri: kamelet:k-http-message-receiver?port={{server.port:8080}}&contextPath={{server.servlet.context-path:/ingestion}}/api/v1/payments
      steps:
        - log:
            message: "[HTTP-RECEIPT] Message received from k-http-message-receiver kamelet"
        - setHeader:
            name: ReceiptChannel
            constant: "HTTP"
        - setHeader:
            name: MessageSource
            constant: "HTTP_API"
        - to:
            uri: direct:payment-ingestion

- route:
    id: file-receipt-route
    from:
      uri: kamelet:k-cft-message-receiver?directoryPath={{ingestion.file.input.directory:/tmp/payments-in}}&filePattern={{ingestion.file.pattern:.*\\.xml}}&processedDirectory={{ingestion.file.processed.directory:/tmp/payments-processed}}&errorDirectory={{ingestion.file.error.directory:/tmp/payments-error}}&delay={{ingestion.file.delay:5000}}
      steps:
        - log:
            message: "[CFT-RECEIPT] Message received from k-cft-message-receiver kamelet"
        - setHeader:
            name: ReceiptChannel
            constant: "CFT"
        - setHeader:
            name: MessageSource
            constant: "CFT_FILE"
        - to:
            uri: direct:payment-ingestion

# Database Persistence Step (First step after message receipt)
- route:
    id: database-persistence
    from:
      uri: direct:database-persistence
      steps:
          log:
            message: "Persisting message to database via k-db-tx"
            level: INFO
            
        - set-header:
            name: "ProcessingStage"
            constant: "DATABASE_PERSISTENCE"
            
        - to:
            uri: kamelet:k-db-tx
        - choice:
            when:
              - simple: "${header.persistenceStatus} == 'SUCCESS'"
                steps:
                  - log:
                      message: "Message successfully persisted to database with ID: ${header.persistedMessageId}"
                  - setHeader:
                      name: MessagePersisted
                      constant: true
            otherwise:
              steps:
                - log:
                    message: "Database persistence failed: ${header.persistenceError}"
                - setHeader:
                    name: MessagePersisted
                    constant: false
                - setHeader:
                    name: RejectionReason
                    constant: DATABASE_PERSISTENCE_FAILED
                - to:
                    uri: direct:error-handler
                - stop: {}

- route:
    id: reference-enrichment
    from:
      uri: direct:reference-enrichment
      steps:
        - log:
            message: "Enriching message with reference data"
        - setHeader:
            name: ProcessingStage
            constant: REFERENCE_ENRICHMENT
        - to:
            uri: kamelet:k-referentiel-data-loader
        - log:
            message: "Reference data enrichment completed"

# Enriched Data Persistence Step (After reference enrichment)
- route:
    id: enriched-data-persistence
    from:
      uri: direct:enriched-data-persistence
      steps:
        - log:
            message: "Persisting enriched message data to database"
        - setHeader:
            name: ProcessingStage
            constant: ENRICHED_DATA_PERSISTENCE
        - setHeader:
            name: PersistenceType
            constant: ENRICHED
        - to:
            uri: kamelet:k-db-tx
        - choice:
            when:
              - simple: "${header.persistenceStatus} == 'SUCCESS'"
                steps:
                  - log:
                      message: "Enriched message data successfully persisted to database with ID: ${header.persistedMessageId}"
                  - setHeader:
                      name: EnrichedDataPersisted
                      constant: true
            otherwise:
              steps:
                - log:
                    message: "Enriched data persistence failed: ${header.persistenceError}"
                - setHeader:
                    name: EnrichedDataPersisted
                    constant: false
                - setHeader:
                    name: RejectionReason
                    constant: ENRICHED_DATA_PERSISTENCE_FAILED
                - to:
                    uri: direct:error-handler
                - stop: {}

- route:
    id: validation-step
    from:
      uri: direct:validation
      steps:
        - log:
            message: "Starting message validation"
        - setHeader:
            name: ProcessingStage
            constant: VALIDATION
        - to:
            uri: kamelet:k-ingestion-technical-validation
        - choice:
            when:
              - simple: "${header.IsValid} == true"
                steps:
                  - log:
                      message: "Message validation passed"
            otherwise:
              steps:
                - log:
                    message: "Message validation failed: ${header.ValidationResult}"
                - setHeader:
                    name: RejectionReason
                    constant: VALIDATION_FAILED

- route:
    id: idempotence-check
    from:
      uri: direct:idempotence-check
      steps:
        - log:
            message: "Starting idempotence check"
        - setHeader:
            name: ProcessingStage
            constant: IDEMPOTENCE
        - to:
            uri: kamelet:k-payment-idempotence-helper?messageId=${header.MessageId}&checkMode=PROCESS
        - choice:
            when:
              - simple: "${header.IsDuplicate} == true"
                steps:
                  - log:
                      message: "Duplicate message detected, checking action"
                  - choice:
                      when:
                        - simple: "${header.ShouldReject} == true"
                          steps:
                            - setHeader:
                                name: RejectionReason
                                constant: DUPLICATE_MESSAGE
                            - setHeader:
                                name: CanProcess
                                constant: false
                        - simple: "${header.ShouldIgnore} == true"
                          steps:
                            - log:
                                message: "Ignoring duplicate message as per configuration"
                            - setHeader:
                                name: CanProcess
                                constant: false
                      otherwise:
                        steps:
                          - log:
                              message: "Processing duplicate with warning"
            otherwise:
              steps:
                - log:
                    message: "Message idempotence check passed"

- route:
    id: kafka-publisher
    from:
      uri: direct:kafka-publisher
      steps:
        - log:
            message: "[KAFKA-ROUTE] Publishing message to Kafka for batch processing"
        - setHeader:
            name: ProcessingStage
            constant: KAFKA_PUBLISH
        - setHeader:
            name: PublishTimestamp
            simple: "${date:now:yyyy-MM-dd HH:mm:ss}"
        - setHeader:
            name: RoutingDestination
            constant: "kafka"
        - choice:
            when:
              - simple: "${header.ExpectedMessageType} == 'pacs.008'"
                steps:
                  - setHeader:
                      name: KafkaTopic
                      simple: "{{ingestion.kafka.topic.pacs008:payments-pacs008}}"
              - simple: "${header.ExpectedMessageType} == 'pan.001'"
                steps:
                  - setHeader:
                      name: KafkaTopic
                      simple: "{{ingestion.kafka.topic.pan001:payments-pan001}}"
            otherwise:
              steps:
                - setHeader:
                    name: KafkaTopic
                    simple: "{{ingestion.kafka.topic.default:payments-processed}}"
        - setHeader:
            name: kafka.KEY
            simple: "${header.PrimaryIdentifier:${exchangeId}}"
        - toD:
            uri: "kafka:${header.KafkaTopic}?brokers={{ingestion.kafka.brokers:localhost:9092}}"
        - log:
            message: "Message successfully published to Kafka topic: ${header.KafkaTopic}"

# ===================================================================
# PROCESSING MODULE PUBLISHER - Real-time Route for HTTP/MQ Messages
# ===================================================================
# This route handles HTTP/MQ messages for real-time processing:
# - Enriches messages with comprehensive metadata
# - Routes directly to processing module (bypasses Kafka)
# - Provides faster processing for interactive channels
- route:
    id: processing-publisher
    from:
      uri: direct:processing-publisher
      steps:
        - log:
            message: "[PROCESSING-ROUTE] Publishing message to processing module"
        - setHeader:
            name: ProcessingStage
            constant: PROCESSING_PUBLISH
        - setHeader:
            name: PublishTimestamp
            simple: "${date:now:yyyy-MM-dd HH:mm:ss}"
        - setHeader:
            name: RoutingDestination
            constant: "processing"
        - process:
            ref: enrichMessageWithMetadata
        - choice:
            when:
              - simple: "{{ingestion.processing.enabled:true}} == true"
                steps:
                  - log:
                      message: "[PROCESSING-ROUTE] Routing to processing module endpoint: {{ingestion.processing.endpoint:direct:kafka-message-processing}}"
                  - toD:
                      uri: "{{ingestion.processing.endpoint:direct:kafka-message-processing}}"
                  - log:
                      message: "[PROCESSING-ROUTE] Message successfully sent to processing module"
            otherwise:
              steps:
                - log:
                    message: "[PROCESSING-ROUTE] Processing module integration disabled, routing to default Kafka"
                - to:
                    uri: direct:kafka-publisher

# Rejection Handler
- route:
    id: rejection-handler
    from:
      uri: direct:rejection-handler
      steps:
        - log:
            message: "Processing rejected message: ${header.RejectionReason}"
        - setHeader:
            name: ProcessingStage
            constant: REJECTION
        - setHeader:
            name: RejectionTimestamp
            simple: "${date:now:yyyy-MM-dd HH:mm:ss}"
        - to:
            uri: "kafka:{{ingestion.kafka.topic.rejected:payments-rejected}}?brokers={{ingestion.kafka.brokers:localhost:9092}}"
        - log:
            message: "Rejected message sent to dead letter topic"

# Error Handler
- route:
    id: error-handler
    from:
      uri: direct:error-handler
      steps:
        - log:
            message: "Processing system error"
        - setHeader:
            name: ProcessingStage
            constant: ERROR
        - to:
            uri: "kafka:{{ingestion.kafka.topic.errors:payments-errors}}?brokers={{ingestion.kafka.brokers:localhost:9092}}"
        - log:
            message: "Error message sent to error topic"