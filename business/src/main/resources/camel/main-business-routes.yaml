- route:
    id: payment-message-processing-main
    from:
      uri: "{{processing.kafka.input.endpoint:direct:kafka-message-processing}}"
      steps:
        - log:
            loggingLevel: INFO
            message: "[PROCESSING-MAIN] Received message for processing"
        - process:
            ref: "messageTypeProcessor"
        - log:
            loggingLevel: INFO
            message: "[PROCESSING-MAIN] Message type: ${header.MessageType}, routing to: ${header.RouteTarget}"
        - recipientList:
            expression:
              simple: "${header.RouteTarget}"

- route:
    id: pacs-008-transformation
    from:
      uri: "direct:pacs-008-transform"
      steps:
        - log:
            loggingLevel: INFO
            message: "[PACS-008-TRANSFORM] Processing pacs.008 message"
        - to:
            uri: "kamelet:k-pacs-008-to-cdm"
        - log:
            loggingLevel: INFO
            message: "[PACS-008-TRANSFORM] Successfully transformed pacs.008 to CDM"
        - to:
            uri: "{{processing.cdm.output.endpoint:direct:cdm-output}}"

- route:
    id: pacs-009-transformation
    from:
      uri: "direct:pacs-009-transform"
      steps:
        - log:
            loggingLevel: INFO
            message: "[PACS-009-TRANSFORM] Processing pacs.009 message"
        - to:
            uri: "kamelet:k-pacs009-to-cdm-transformer"
        - log:
            loggingLevel: INFO
            message: "[PACS-009-TRANSFORM] Successfully transformed pacs.009 to CDM"
        - to:
            uri: "{{processing.cdm.output.endpoint:direct:cdm-output}}"

- route:
    id: pain-001-transformation
    from:
      uri: "direct:pain-001-transform"
      steps:
        - log:
            loggingLevel: INFO
            message: "[PAIN-001-TRANSFORM] Processing pain.001 message"
        - to:
            uri: "kamelet:k-pain001-to-cdm-transformer"
        - log:
            loggingLevel: INFO
            message: "[PAIN-001-TRANSFORM] Successfully transformed pain.001 to CDM"
        - to:
            uri: "{{processing.cdm.output.endpoint:direct:cdm-output}}"

- route:
    id: camt-053-transformation
    from:
      uri: "direct:camt-053-transform"
      steps:
        - log:
            loggingLevel: INFO
            message: "[CAMT-053-TRANSFORM] Processing camt.053 message"
        - to:
            uri: "kamelet:k-camt053-to-cdm-transformer"
        - log:
            loggingLevel: INFO
            message: "[CAMT-053-TRANSFORM] Successfully transformed camt.053 to CDM"
        - to:
            uri: "{{processing.cdm.output.endpoint:direct:cdm-output}}"

- route:
    id: unknown-message-handling
    from:
      uri: "direct:unknown-message"
      steps:
        - log:
            loggingLevel: WARN
            message: "[UNKNOWN-MESSAGE] Received message with unknown type"
        - setHeader:
            name: "ErrorCode"
            constant: "UNKNOWN_MESSAGE_TYPE"
        - setHeader:
            name: "ErrorDescription"
            constant: "Message type could not be determined"
        - to:
            uri: "{{processing.error.endpoint:direct:error-handling}}"

- route:
    id: cdm-output-processing
    from:
      uri: "{{processing.cdm.output.endpoint:direct:cdm-output}}"
      steps:
        - log:
            loggingLevel: INFO
            message: "[CDM-OUTPUT] Processing transformed CDM message from origin: ${header.messageSource}"
        - setHeader:
            name: "TransformationComplete"
            constant: true
        - setHeader:
            name: "OutputTimestamp"
            expression:
              simple: "${date:now:yyyy-MM-dd'T'HH:mm:ss.SSSZ}"
        - choice:
            when:
              - expression:
                  simple: "${header.messageSource} == 'KAFKA_TOPIC'"
                steps:
                  - log:
                      loggingLevel: INFO
                      message: "[CDM-OUTPUT] Message originated from Kafka, routing to Kafka output broker"
                  - setHeader:
                      name: "CamelKafkaKey"
                      expression:
                        simple: "${header.kafkaKey}"
                  - to:
                      uri: "kafka:{{processing.kafka.output.topic:cdm-processed-messages}}?brokers={{processing.kafka.output.broker:localhost:9092}}"
                  - log:
                      loggingLevel: INFO
                      message: "[CDM-OUTPUT] CDM message sent to Kafka topic: {{processing.kafka.output.topic:cdm-processed-messages}}"
            otherwise:
              steps:
                - log:
                    loggingLevel: INFO
                    message: "[CDM-OUTPUT] Message originated from non-Kafka source, routing to outbound service"
                - setHeader:
                    name: "Content-Type"
                    constant: "application/json"
                - setHeader:
                    name: "messageType"
                    constant: "CDM_PROCESSED"
                - setHeader:
                    name: "processingStage"
                    constant: "CDM_TRANSFORMATION_COMPLETE"
                - to:
                    uri: "direct:route-to-outbound"
                - log:
                    loggingLevel: INFO
                    message: "[CDM-OUTPUT] CDM message sent to outbound service"
        - log:
            loggingLevel: INFO
            message: "[CDM-OUTPUT] CDM message processing and routing complete"

- route:
    id: route-to-outbound-service
    from:
      uri: "direct:route-to-outbound"
      steps:
        - log:
            loggingLevel: INFO
            message: "[OUTBOUND-ROUTING] Sending CDM message to outbound service"
        - setHeader:
            name: "CamelHttpMethod"
            constant: "POST"
        - setHeader:
            name: "Content-Type"
            constant: "application/json"
        - removeHeaders:
            pattern: "Camel*,kafka*,CamelHttp*"
        - doTry:
            steps:
              - to:
                  uri: "{{processing.outbound.service.endpoint:http://localhost:8082/outbound/submit}}"
              - log:
                  loggingLevel: INFO
                  message: "[OUTBOUND-ROUTING] Successfully sent message to outbound service"
            doCatch:
              - exception:
                  - "java.lang.Exception"
                steps:
                  - log:
                      loggingLevel: ERROR
                      message: "[OUTBOUND-ROUTING] Failed to send message to outbound service: ${exception.message}"
                  - setHeader:
                      name: "ErrorCode"
                      constant: "OUTBOUND_SERVICE_FAILURE"
                  - setHeader:
                      name: "ErrorDescription"
                      expression:
                        simple: "Failed to communicate with outbound service: ${exception.message}"
                  - to:
                      uri: "{{processing.error.endpoint:direct:error-handling}}"

- route:
    id: error-handling
    from:
      uri: "{{processing.error.endpoint:direct:error-handling}}"
      steps:
        - log:
            loggingLevel: ERROR
            message: "[ERROR-HANDLER] Processing error: ${header.ErrorCode} - ${header.ErrorDescription}"
        - setHeader:
            name: "ErrorHandled"
            constant: true
        - setHeader:
            name: "ErrorTimestamp"
            expression:
              simple: "${date:now:yyyy-MM-dd'T'HH:mm:ss.SSSZ}"

- route:
    id: http-pacs-008-direct
    from:
      uri: "platform-http:/business/api/direct/pacs-008-transform"
      steps:
        - log:
            loggingLevel: INFO
            message: "[HTTP-DIRECT] Received PACS.008 message from ingestion module"
        - setHeader:
            name: "MessageType"
            constant: "pacs.008"
        - setHeader:
            name: "RouteTarget"
            constant: "direct:pacs-008-transform"
        - to:
            uri: "direct:pacs-008-transform"

- route:
    id: http-pacs-009-direct
    from:
      uri: "platform-http:/business/api/direct/pacs-009-transform"
      steps:
        - log:
            loggingLevel: INFO
            message: "[HTTP-DIRECT] Received PACS.009 message from ingestion module"
        - setHeader:
            name: "MessageType"
            constant: "pacs.009"
        - setHeader:
            name: "RouteTarget"
            constant: "direct:pacs-009-transform"
        - to:
            uri: "direct:pacs-009-transform"

- route:
    id: http-pain-001-direct
    from:
      uri: "platform-http:/business/api/direct/pain-001-transform"
      steps:
        - log:
            loggingLevel: INFO
            message: "[HTTP-DIRECT] Received PAIN.001 message from ingestion module"
        - setHeader:
            name: "MessageType"
            constant: "pain.001"
        - setHeader:
            name: "RouteTarget"
            constant: "direct:pain-001-transform"
        - to:
            uri: "direct:pain-001-transform"

- route:
    id: http-camt-053-direct
    from:
      uri: "platform-http:/business/api/direct/camt-053-transform"
      steps:
        - log:
            loggingLevel: INFO
            message: "[HTTP-DIRECT] Received CAMT.053 message from ingestion module"
        - setHeader:
            name: "MessageType"
            constant: "camt.053"
        - setHeader:
            name: "RouteTarget"
            constant: "direct:camt-053-transform"
        - to:
            uri: "direct:camt-053-transform"

- route:
    id: http-general-processing-direct
    from:
      uri: "platform-http:/business/api/direct/kafka-message-processing"
      steps:
        - log:
            loggingLevel: INFO
            message: "[HTTP-DIRECT] Received message from ingestion module for general processing"
        - process:
            ref: "messageTypeProcessor"
        - log:
            loggingLevel: INFO
            message: "[HTTP-DIRECT] Message type detected: ${header.MessageType}, routing to: ${header.RouteTarget}"
        - recipientList:
            expression:
              simple: "${header.RouteTarget}"

- route:
    id: health-check
    from:
      uri: "direct:health-check"
      steps:
        - log:
            loggingLevel: DEBUG
            message: "[HEALTH-CHECK] Processing health check request"
        - setBody:
            constant: "{'status': 'UP', 'service': 'payment-message-processing'}"
        - setHeader:
            name: "Content-Type"
            constant: "application/json"

- route:
    id: metrics-collection
    from:
      uri: "direct:metrics"
      steps:
        - log:
            loggingLevel: DEBUG
            message: "[METRICS] Collecting processing metrics"
        - setBody:
            expression:
              simple: "{'processedMessages': '${exchangeProperty.CamelMessageHistory}', 'timestamp': '${date:now:yyyy-MM-dd HH:mm:ss}'}"
        - setHeader:
            name: "Content-Type"
            constant: "application/json"

# Note: Global error handling configured at route level